# Unpoller v2 primary configuration file. TOML FORMAT #
###########################################################

[poller]
  # Turns on line numbers, microsecond logging, and a per-device log.
  # The default is false, but I personally leave this on at home (four devices).
  # This may be noisy if you have a lot of devices. It adds one line per device.
  debug = true

  # Turns off per-interval logs. Only startup and error logs will be emitted.
  # Recommend enabling debug with this setting for better error logging.
  quiet = false

  # Load dynamic plugins. Advanced use; only sample mysql plugin provided by default.
  plugins = []

#### OUTPUTS

    # If you don't use an output, you can disable it.

[prometheus]
  disable = true
  # This controls on which ip and port /metrics is exported when mode is "prometheus".
  # This has no effect in other modes. Must contain a colon and port.
  http_listen = "0.0.0.0:9130"
  # Adding an SSL Cert and Cert Key will make Poller listen with SSL/https.
  ssl_cert_path = ""
  ssl_key_path  = ""
  # Errors are rare. Setting this to true will report them to Prometheus.
  report_errors = false
  ## Record data for disabled or down (unlinked) switch ports.
  dead_ports = false

[influxdb]
  disable = false
  # InfluxDB does not require auth by default, so the user/password are probably unimportant.
  url  = "http://influxdb:8086"
  user = "{{ project.influxdb.admin.username }}"
  # Password for InfluxDB user (above).
  # If the password provided here begins with file:// then the password is read in from
  # the file path that follows the file:// prefix. ex: file:///etc/influxdb/passwd.file
  pass = "{{ project.influxdb.admin.password }}"
  # Be sure to create this database. See the InfluxDB Wiki page for more info.
  db = "unpoller"
  # If your InfluxDB uses a valid SSL cert, set this to true.
  verify_ssl = false
  # The UniFi Controller only updates traffic stats about every 30 seconds.
  # Setting this to something lower may lead to "zeros" in your data.
  # If you're getting zeros now, set this to "1m"
  interval = "10s"
  ## Record data for disabled or down (unlinked) switch ports.
  dead_ports = false

# To enable output of UniFi Events to Loki, add a URL; it's disabled otherwise.
# User, pass and tenant_id are optional and most folks wont set them.
# Pick which logs you want per-controller in the [unifi.controller] section.
# This is a new feature. Feedback welcome!
[loki]
  disable = true
  url = ""
  # The rest of this is advanced & optional. See wiki.
  user       = ""
  pass       = ""
  verify_ssl = false
  tenant_id  = ""
  interval   = "2m"
  timeout    = "10s"

[datadog]
  # How often to poll UniFi and report to Datadog.
  interval = "2m"

  # To enable this output plugin
  enable = false

  # Datadog Custom Options

  # address to talk to the datadog agent, by default this uses the local statsd UDP interface
  # address = "localhost:8125"

  # namespace to prepend to all data, default is no additional prefix.
  # namespace = ""

  # tags to append to all data
  # tags = [ "customer:abc_corp" ]

  # For more advanced options for very large amount of data collected see the upstream
  # github.com/unpoller/unpoller/pkg/datadogunifi repository README.


# Unpoller has an optional web server. To turn it on, set enable to true. If you
# wish to use SSL, provide SSL cert and key paths. This interface is currently
# read-only; it just displays information, like logs, devices and clients.
# Notice: Enabling the web server with many sites will increase memory usage.
# This is a new feature and lacks a UI, enabling only recommended for testing.
[webserver]
  enable = false
  port   = 37288
  # The HTML path is different on Windows and BSD/macOS.
  html_path     = "/usr/local/lib/unpoller/web"
  ssl_cert_path = ""
  ssl_key_path  = ""
  # How many events per event group to hold. 200-2000. Use fewer with many sites.
  # With 1 site, you'll have a max total of 9 event groups; 1 per plugin, 4 per site.
  # Each site adds 1 event group for each of these inputs that is enabled:
  #   save_ids, save_events, save_anomalies, save_alarms.
  max_events = 200

# By default the web interface does not require authentication. You can change
# that by adding a username and password hash (or multiple) below.
# To create a hash, run unifi-poller with the -e CLI argument. See Wiki for more!
[webserver.accounts]
# username = "password-hash"
# captain = "$2a$04$mxw6i0LKH6u46oaLK2cq5eCTAAFkfNiRpzNbz.EyvJZZWNa2FzIlS"

#### INPUTS

[unifi]
  # Setting this to true and providing default credentials allows you to skip
  # configuring controllers in this config file. Instead you configure them in
  # your prometheus.yml config. Prometheus then sends the controller URL to
  # Unpoller when it performs the scrape. This is useful if you have many,
  # or changing controllers. See wiki for more.
  dynamic = false

# The following section contains the default credentials/configuration for any
# dynamic controller (see above section), or the primary controller if you do not
# provide one and dynamic is disabled. In other words, you can just add your
# controller here and delete the following section. The internal defaults are
# shown below. Any missing values will assume these displayed defaults.

[unifi.defaults]
  url         = "{{ project.unifi.url }}"
  user        = "{{ project.unifi.username }}"
  pass        = "{{ project.unifi.password }}"
  sites       = ["all"]
  save_sites  = true
  hash_pii    = false
  save_ids    = false
  save_events = false
  save_alarms = false
  save_anomalies = false
  save_dpi    = false
  save_rogue  = false
  verify_ssl  = false
  ssl_cert_paths = []

# The following is optional and used for configurations with multiple UniFi controllers.

# You may repeat the following [[unifi.controller]] section as many times as needed to
# poll multiple controllers. Uncomment the entire section including [[unifi.controller]].
# Omitted variables will have their values taken from the defaults, above.
#
# [[unifi.controller]]
#   url         = "{{ project.unifi.url }}"
#   user        = "{{ project.unifi.username }}"
#   pass        = "{{ project.unifi.password }}"
#   sites       = ["all"]
#   save_sites  = true
#   hash_pii    = false
#   save_ids    = false
#   save_events = false
#   save_alarms = false
#   save_anomalies = false
#   save_dpi    = false
#   save_rogue  = false
#   verify_ssl  = false
#   ssl_cert_paths = []